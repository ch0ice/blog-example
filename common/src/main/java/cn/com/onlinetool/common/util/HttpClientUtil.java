package cn.com.onlinetool.common.util;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;import org.apache.http.Header;import org.apache.http.HttpEntity;import org.apache.http.HttpStatus;import org.apache.http.client.config.RequestConfig;import org.apache.http.client.methods.CloseableHttpResponse;import org.apache.http.client.methods.HttpGet;import org.apache.http.client.methods.HttpPost;import org.apache.http.client.utils.URIBuilder;import org.apache.http.entity.ContentType;import org.apache.http.entity.StringEntity;import org.apache.http.entity.mime.HttpMultipartMode;import org.apache.http.entity.mime.MultipartEntityBuilder;import org.apache.http.impl.client.CloseableHttpClient;import org.apache.http.impl.client.HttpClients;import org.apache.http.message.BasicHeader;import org.apache.http.util.EntityUtils;import org.springframework.web.multipart.MultipartFile;import java.io.IOException;import java.net.URI;import java.net.URISyntaxException;import java.util.HashMap;import java.util.List;import java.util.Map;public class HttpClientUtil {    // 默认字符集    private static final String ENCODING = "UTF-8";    private static final int HTTP_TIME_OUT = 6 * 1000;    /**     * @Title: sendPost     * @Description: TODO(发送post请求)     * @param url 请求地址     * @param headers 请求头     * @param data 请求实体     * @param encoding 字符集     * @author wangxy     * @return String     * @date 2018年5月10日 下午4:36:17     * @throws     */    public static String sendPost(String url, Map<String, String> headers, Object data, String encoding) throws URISyntaxException, IOException, Exception {        // 请求返回结果        String resultJson = null;        // 创建Client        CloseableHttpClient client = HttpClients.createDefault();        // 创建HttpPost对象        HttpPost httpPost = new HttpPost();        try {            // 设置请求地址            httpPost.setURI(new URI(url));            // 设置请求头            if (headers != null) {                Header[] allHeader = new BasicHeader[headers.size()];                int i = 0;                for (Map.Entry<String, String> entry: headers.entrySet()){                    allHeader[i] = new BasicHeader(entry.getKey(), entry.getValue());                    i++;                }                httpPost.setHeaders(allHeader);            }            // 设置实体            httpPost.setEntity(new StringEntity(JSON.toJSONString(data)));            // 发送请求,返回响应对象            CloseableHttpResponse response = client.execute(httpPost);            // 获取响应状态            int status = response.getStatusLine().getStatusCode();            if (status == HttpStatus.SC_OK) {                // 获取响应结果                resultJson = EntityUtils.toString(response.getEntity(), encoding);            } else {                resultJson = EntityUtils.toString(response.getEntity(), encoding);                System.out.println(resultJson);                JSONObject json = (JSONObject)JSONObject.parse( resultJson );                throw new Exception(json.getString("title"));            }            //log.error("发送post请求失败", e);        } finally {            httpPost.releaseConnection();        }        return resultJson;    }    /**     * @Title: sendPost     * @Description: TODO(发送post请求，请求数据默认使用json格式，默认使用UTF-8编码)     * @param url 请求地址     * @param data 请求实体     * @author wangxy     * @return String     * @date 2018年5月10日 下午4:37:28     * @throws     */    public static String sendPost(String url, Object data)throws URISyntaxException, IOException, Exception {        // 设置默认请求头        Map<String, String> headers = new HashMap<>();        headers.put("content-type", "application/json");        return sendPost(url, headers, data, ENCODING);    }    /**     * @Title: sendPost     * @Description: TODO(发送post请求，请求数据默认使用json格式，默认使用UTF-8编码)     * @param url 请求地址     * @param data 请求实体     * @author wangxy     * @return String     * @date 2018年5月10日 下午4:37:28     * @throws     */    public static String sendPost(String url, Object data,String contentType)throws URISyntaxException, IOException, Exception {        // 设置默认请求头        Map<String, String> headers = new HashMap<>();        headers.put("content-type", contentType);        return sendPost(url, headers, data, ENCODING);    }    /**     * @Title: sendPost     * @Description: TODO(发送post请求，请求数据默认使用json格式，默认使用UTF-8编码)     * @param url 请求地址     * @param params 请求实体     * @author wangxy     * @return String     * @date 2018年5月10日 下午6:11:05     * @throws     */    public static String sendPost(String url,Map<String,Object> params)throws URISyntaxException, IOException, Exception{        // 设置默认请求头        Map<String, String> headers = new HashMap<>();        headers.put("content-type", "application/json");        // 将map转成json        JSONObject data = JSONObject.parseObject(JSON.toJSONString(params));        return sendPost(url,headers,data,ENCODING);    }    /**     * @Title: sendPost     * @Description: TODO(发送post请求，请求数据默认使用UTF-8编码)     * @param url 请求地址     * @param headers 请求头     * @param data 请求实体     * @author wangxy     * @return String     * @date 2018年5月10日 下午4:39:03     * @throws     */    public static String sendPost(String url, Map<String, String> headers, JSONObject data) throws URISyntaxException, IOException, Exception{        return sendPost(url, headers, data, ENCODING);    }    /**     * @Title: sendPost     * @Description:(发送post请求，请求数据默认使用UTF-8编码)     * @param url 请求地址     * @param headers 请求头     * @param params 请求实体     * @author wangxy     * @return String     * @date 2018年5月10日 下午5:58:40     * @throws     */    public static String sendPost(String url, Map<String,String> headers, Map<String,String> params) throws URISyntaxException, IOException, Exception{        // 将map转成json        JSONObject data = JSONObject.parseObject(JSON.toJSONString(params));        return sendPost(url,headers,data,ENCODING);    }    /**     * @Title: sendGet     * @Description: TODO(发送get请求)     * @param url 请求地址     * @param params 请求参数     * @param encoding 编码     * @author wangxy     * @return String     * @date 2018年5月14日 下午2:39:01     * @throws     */    public static String sendGet(String url,Map<String,String> headers,Map<String,Object> params,String encoding) throws URISyntaxException, IOException, Exception {        // 请求结果        String resultJson = null;        // 创建client        CloseableHttpClient client = HttpClients.createDefault();        // 创建HttpGet        HttpGet httpGet = new HttpGet();        try {            // 创建uri            URIBuilder builder = new URIBuilder(url);            // 设置请求头            if (headers != null) {                Header[] allHeader = new BasicHeader[headers.size()];                int i = 0;                for (Map.Entry<String, String> entry: headers.entrySet()){                    allHeader[i] = new BasicHeader(entry.getKey(), entry.getValue());                    i++;                }                httpGet.setHeaders(allHeader);            }            // 封装参数            if(params != null){                for (String key : params.keySet()) {                    builder.addParameter(key, params.get(key).toString());                }            }            URI uri = builder.build();            // 设置请求地址            httpGet.setURI(uri);            // 发送请求，返回响应对象            CloseableHttpResponse response = client.execute(httpGet);            // 获取响应状态            int status = response.getStatusLine().getStatusCode();            if(status == HttpStatus.SC_OK){                // 获取响应数据                resultJson = EntityUtils.toString(response.getEntity(), encoding);            }else{                resultJson = EntityUtils.toString(response.getEntity(), encoding);                System.out.println(resultJson);                JSONObject json = (JSONObject)JSONObject.parse( resultJson );                throw new Exception(json.getString("title"));            }        } finally {            httpGet.releaseConnection();        }        return resultJson;    }    /**     * @Title: sendGet     * @Description: TODO(发送get请求)     * @param url 请求地址     * @param params 请求参数     * @author wangxy     * @return String     * @date 2018年5月14日 下午2:32:39     * @throws     */    public static String sendGet(String url,Map<String,Object> params) throws Exception, IOException, URISyntaxException {        Map<String, String> headers = new HashMap<>();        headers.put("content-type", "application/json");        return sendGet(url,headers,params,ENCODING);    }    /**     * @Title: sendGet     * @Description: TODO(发送get请求)     * @param url 请求地址     * @author wangxy     * @return String     * @date 2018年5月14日 下午2:33:45     * @throws     */    public static String sendGet(String url) throws Exception, IOException, URISyntaxException {        Map<String, String> headers = new HashMap<>();        headers.put("content-type", "application/json");        return sendGet(url,headers,null,ENCODING);    }    /**     * @Title: sendGet     * @Description: TODO(发送get请求)     * @param url 请求地址     * @author wangxy     * @return String     * @date 2018年5月14日 下午2:33:45     * @throws     */    public static String sendGet(String url,Map<String, String> headers,Map<String,Object> params) throws Exception, IOException, URISyntaxException {        headers.put("content-type", "application/json");        return sendGet(url,headers,params,ENCODING);    }    /**     * 设置head头Token     * @param token     * @return     */    public static Map<String,String> getToken(String token){        Map<String,String> headers=new HashMap<String,String>();        headers.put("Authorization", token);        return headers;    }    /**     * 使用HttpClient4.5 post提交multipart/form-data数据实现多文件上传     * @param url 请求地址     * @param files post提交的文件列表     * @param fileParName fileKey     * @return     * @date 2018年5月8日 上午10:26:15     */    public static String sendFile2Post(String url, List<MultipartFile> files, String fileParName) throws IOException, Exception {        return sendFile2Post(url,ENCODING,files,fileParName);    }    /**     * 使用HttpClient4.5 post提交multipart/form-data数据实现多文件上传     * @param url 请求地址     * @param files post提交的文件列表     * @param fileParName fileKey     * @return     * @date 2018年5月8日 上午10:26:15     */    public static String sendFile2Post(String url, String encoding, List<MultipartFile> files, String fileParName) throws IOException, Exception {//        Map<String, String> resultMap = new HashMap<String, String>();        CloseableHttpClient httpClient = HttpClients.createDefault();        String resultJson = "";        try {            HttpPost httpPost = new HttpPost(url);            MultipartEntityBuilder builder = MultipartEntityBuilder.create();            builder.setCharset(java.nio.charset.Charset.forName("UTF-8"));            builder.setMode(HttpMultipartMode.BROWSER_COMPATIBLE);            String fileName = null;            MultipartFile multipartFile = null;            for (int i = 0; i < files.size(); i++) {                multipartFile = files.get(i);                fileName = multipartFile.getOriginalFilename();                // 文件流                builder.addBinaryBody(fileParName, multipartFile.getInputStream(), ContentType.MULTIPART_FORM_DATA, fileName);            }//            //决中文乱码//            ContentType contentType = ContentType.create(HTTP.PLAIN_TEXT_TYPE, ENCODING);//            for (Map.Entry<String, Object> entry : params.entrySet()) {//                if(entry.getValue() == null) {//                    continue;//                }//                // 类似浏览器表单提交，对应input的name和value//                builder.addTextBody(entry.getKey(), entry.getValue().toString(), contentType);//            }            HttpEntity entity = builder.build();            httpPost.setEntity(entity);            CloseableHttpResponse response = httpClient.execute(httpPost);            // 获取响应状态            int status = response.getStatusLine().getStatusCode();            // 设置连接超时时间            RequestConfig requestConfig = RequestConfig.custom().setConnectTimeout(HTTP_TIME_OUT)                    .setConnectionRequestTimeout(HTTP_TIME_OUT).setSocketTimeout(HTTP_TIME_OUT).build();            httpPost.setConfig(requestConfig);//            HttpEntity responseEntity = response.getEntity();            if (status == HttpStatus.SC_OK) {                // 获取响应结果                resultJson = EntityUtils.toString(response.getEntity(), encoding);            } else {                resultJson = EntityUtils.toString(response.getEntity(), encoding);                System.out.println(resultJson);                JSONObject json = (JSONObject)JSONObject.parse( resultJson );                throw new Exception(json.getString("title"));            }//            resultMap.put("scode", String.valueOf(response.getStatusLine().getStatusCode()));//            resultMap.put("data", "");//            if (responseEntity != null) {//                // 将响应内容转换为字符串//                result = EntityUtils.toString(responseEntity, java.nio.charset.Charset.forName(ENCODING));//                resultMap.put("data", result);//            }        }  finally {            try {                httpClient.close();            } catch (IOException e) {                e.printStackTrace();            }        }        return resultJson;    }}